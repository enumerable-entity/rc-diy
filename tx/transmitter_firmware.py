import machine
import utime
import struct
import _thread
from nrf24l01 import NRF24L01

# NRF24L01 —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
spi = machine.SPI(0, baudrate=8000000, sck=machine.Pin(2), mosi=machine.Pin(3), miso=machine.Pin(4))
csn = machine.Pin(5, machine.Pin.OUT)
ce = machine.Pin(6, machine.Pin.OUT)

nrf = NRF24L01(spi, csn, ce, payload_size=8)
nrf.open_tx_pipe(b'\xe1\xf0\xf0\xf0\xf0')
nrf.open_rx_pipe(1, b'\xd2\xf0\xf0\xf0\xf0')
nrf.stop_listening()

# –î–∂–æ–π—Å—Ç–∏–∫–∏ (ADC)
adc_x1 = machine.ADC(26)
adc_x2 = machine.ADC(27)

# –ü–µ—Ä–µ–º–∏–∫–∞—á—ñ (GPIO)
sw1 = machine.Pin(14, machine.Pin.IN, machine.Pin.PULL_UP)
sw2 = machine.Pin(15, machine.Pin.IN, machine.Pin.PULL_UP)

# –°–ø—ñ–ª—å–Ω—ñ –¥–∞–Ω—ñ
shared_data = {
    "x1": 128,
    "x2": 128,
    "b1": False,
    "b2": False
}

# –ó–∞–º–æ–∫ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ–∫–∏
lock = _thread.allocate_lock()

# üü¢ –Ø–î–†–û 1: –¢—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ NRF24
def nrf_loop():
    while True:
        with lock:
            x1 = shared_data["x1"]
            x2 = shared_data["x2"]
            b1 = shared_data["b1"]
            b2 = shared_data["b2"]

        buf = struct.pack('BB??', x1, x2, b1, b2)
        try:
            nrf.send(buf)
        except OSError:
            pass  # –Ø–∫—â–æ –±—É—Ñ–µ—Ä NRF –∑–∞–±–∏—Ç–∏–π ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ (–Ω–µ–º–∞ sleep!)

# üîµ –Ø–î–†–û 0: –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∂–æ–π—Å—Ç–∏–∫—ñ–≤ —ñ –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ–≤
def read_loop():
    while True:
        x1 = adc_x1.read_u16() >> 8  # 0-255
        x2 = adc_x2.read_u16() >> 8  # 0-255

        b1 = not sw1.value()  # –∞–∫—Ç–∏–≤–Ω–∏–π 0 ‚Üí –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ
        b2 = not sw2.value()

        with lock:
            shared_data["x1"] = x1
            shared_data["x2"] = x2
            shared_data["b1"] = b1
            shared_data["b2"] = b2

        utime.sleep_ms(10)  # 100 –ì—Ü –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∂–æ–π—Å—Ç–∏–∫—ñ–≤

# –°—Ç–∞—Ä—Ç NRF –ø–µ—Ä–µ–¥–∞—á—ñ –Ω–∞ —è–¥—Ä—ñ 1
_thread.start_new_thread(nrf_loop, ())

# –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –Ω–∞ —è–¥—Ä—ñ 0
read_loop()
